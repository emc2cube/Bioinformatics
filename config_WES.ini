##############################################################
##                       Description                        ##
##############################################################
#
# Edit this file to create custom configurations to use with
# sh_WES.sh. Any change to this file will override default
# script settings.
#
##############################################################
##                  Configurable variables                  ##
##############################################################
#
#
## General options
#
# Maximum number of threads (or CPUs) to request and allocate to programs.
# In some case less than this value may automatically be allowed.
threads=$(nproc --all --ignore=1)
#
# Maximum amount of memory (in GB) to request and allocate to programs.
# In some case less than this value may automatically be allowed.
mem="128"
#
# Log folder, will be created in your destination folder.
logs="logs"
#
# Advanced: Path to temporary folder. Useful if your cluster system have a fast local I/O disk.
# Leave empty to use the destination folder. In all cases temporary files will be purged at the end of the script.
tmp="\${L_SCRATCH_JOB}"
#
# Debug mode.
# For troubleshooting only. Will keep all intermediate files,
# sbatch files and logs.
# 0 = No ; 1 = Yes
debug="0"
#
#
## SLURM options
#
# email to use to receive SLURM notifications.
# By default only send FAIL notifications for all jobs and FAIL,END for the last one.
SLURMemail=""
#
# SLURM account, partition and qos settings if required.
SLURMaccount=""
SLURMpartition=""
SLURMqos=""
#
# Custom commands to run before any other program.
# Use it to load modules for example:
# customcmd="module load R"
customcmd=""
#
#
## FastQ options
#
# If sample files are split into multiple FastQ files, merge them.
# 0 = No ; 1 = Yes
merge="0"
#
# Process undetermined/unmatched files (tag not properly recognized).
# 0 = No ; 1 = Yes
underdet="0"
#
# Process BLANK files (Sample name should be "BLANK").
# 0 = No ; 1 = Yes
blank="0"
#
# Perform fastqc on fastq files.
# If sequences are trimmed, fastqc will be performed on trimmed sequences.
# 0 = No ; 1 = Yes
fastqc="0"
#
# Trim sequences with Trimmomatic.
# 0 = No ; 1 = Yes
trim="0"
#
# Trimmomatic folder, should contain a trimmomatic.jar file
Trimmomatic="/Tools/Trimmomatic"
#
# Keep unpaired trimmed sequences.
# 0 = No ; 1 = Yes
unpaired="0"
#
#
## Alignment options
#
# Filter by MapQ quality score to remove poor aligned reads.
# samtools defaut is 0 (no filtering), 10<MapQ<20 is advised.
mapq="10"
#
# bowtie2 indexed reference genome location.
bt_refgenome="/Tools/RefGenomes/Homo_sapiens/UCSC/hg19/Sequence/Bowtie2Index/genome"
#
# Read group parameters.
# Library: if empty LB will be set to the destination folder name.
LB=""
#
# Platform used to produce the reads.
# Valid values: CAPILLARY, LS454, ILLUMINA, SOLID, HELICOS, IONTORRENT and PACBIO.
PL="ILLUMINA"
#
#
## GATK options
#
# Picard-tools picard.jar location.
picard="/Tools/Picard/picard.jar"
#
# GATK GenomeAnalysisTK.jar file location.
gatk="/Tools/GATK/GenomeAnalysisTK.jar"
#
# Reference genome (fasta) file.
# It must be the same one that was indexed by bowtie2 for alignment
fasta_refgenome="/Tools/RefGenomes/Homo_sapiens/UCSC/hg19/Sequence/WholeGenomeFasta/genome.fa"
#
# List of the targeted intervals sequenced. 
# This is necessary as only about 60-70% of all the reads will end up in exonic regions and the rest may align anywhere else in the genome.
# To restrict the output to exonic sequences, generate a file containing for example all the exons plus 50bp at each end for getting splice site information as well.
# This can be done using the UCSC Table Browser (http://genome.ucsc.edu/cgi-bin/hgTables?command=start).
# Choose the hg19 assembly of the human genome and set the track to RefSeq genes and the table to refGene.
# Use BED format as output format and assign the file an appropriate name.
# By clicking on get output, several more options can be made: Choose "create one bed record per Exon plus 50bp at each end" and save the file.
# A .bed file specific to the library preparation kit targets can be used instead if available (ex: https://earray.chem.agilent.com/suredesign/search.htm ).
regions="/Tools/AgilentBedFiles/SureSelect_Human_All_Exon_V6+UTR_r2/S07604624_Covered.bed"
#
# VQSR reference files (from GATK bundle).
# HapMap vcf file location (SNP).
hapmap="/Tools/GATK/hapmap_3.3.hg19.sites.vcf"
# 1000 genome omni vcf file location (SNP).
omni="/Tools/GATK/1000G_omni2.5.hg19.sites.vcf"
# 1000 genomes phase 1 indels vcf file location.
onekGph1="/Tools/GATK/1000G_phase1.snps.high_confidence.hg19.sites.vcf"
# dbSNP known SNPs .vcf file location.
dbSNP="/Tools/GATK/dbsnp_138.hg19.vcf"
# Mills and 1000 genomes gold standard vcf file location.
millsgold="/Tools/GATK/Mills_and_1000G_gold_standard.indels.hg19.sites.vcf"
#
# Indel realignment is generally no longer necessary for variant discovery,
# unless in specific uncommon use cases.
# 0 = No ; 1 = Yes
realign="0"
#
# Stop after .g.vcf creation (no filtering, no annotation).
# Yes = 1 ; No = 0
gvcf="0"
#
# PED file to specify family relations if available.
ped=$([ -f "${dir}/$(basename ${dir}).ped" ] && echo "${dir}/$(basename ${dir}).ped")
#
# Folder containing gVCFs to be used as a learning control for VQSR calibration.
# Leave empty if you have a ready to use .vcf file and use popgvcf below.
popfolder=""
#
# VCF file to be used as a learning control for VQSR calibration.
popgvcf=""
#
# Compute coverage (slow).
# Yes = 1 ; No = 0
coverage="1"
#
#
## Annovar options
#
# Annovar folder (containing humandb folder).
annovar="/Tools/annovar"
#
# Genome build version.
# Name of the genome assembly used. Can also be determined automatically from your directory structure (see examples).
# examples:
# buildver="hg19"
# buildver=$(echo ${fasta_refgenome} | sed 's/\/Sequence.*//g' | awk -F/ '{print $NF}')
buildver=$(echo ${fasta_refgenome} | sed 's/\/Sequence.*//g' | awk -F/ '{print $NF}')
#
# Protocols to be used for annotation.
protocol="refGene,phastConsElements46way,genomicSuperDups,gwasCatalog,esp6500siv2_all,1000g2015aug_all,exac03,gme,kaviar_20150923,avsnp150,dbnsfp35a,dbnsfp31a_interpro,dbscsnv11,clinvar_20200316,intervar_20180118,hrcr1,revel,mcap,gnomad211_exome"
#
# Matching operations to be used for annotation.
operation="g,r,r,r,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f"
#
#
## IFTTT options
#
# Trigger IFTTT when script is done.
# You must register the "Maker channel" on https://ifttt.com/maker
# Copy your private key here. Leave blank to disable this function.
# iftttkey="AbCd_15CdhUIvbsFJTHGMcfgjsdHRTgcyjt" # Not a real key, you have to use your own private key.
iftttkey=""
#
# Event name used in your IFTTT recipes.
# The maker channel will look for the combination private key + event name to then trigger your recipe.
# You can create a recipe to send an email, a text message or a push notification.
iftttevent="SNPCalling"
#
#
##############################################################
##  Setup done. Go home there is nothing below this point!  ##
##############################################################
